// <auto-generated />
using System;
using Garrison.Lib;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Garrison.Lib.Migrations
{
    [DbContext(typeof(GarrisonContext))]
    [Migration("20250207084715_ApiKeys")]
    partial class ApiKeys
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Garrison.Lib.Models.Adventure", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    b.Property<uint>("GameMasterId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("game_master_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_adventure");

                    b.HasIndex("GameMasterId")
                        .HasDatabaseName("ix_adventure_game_master_id");

                    b.ToTable("adventure", (string)null);
                });

            modelBuilder.Entity("Garrison.Lib.Models.ApiKey", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime>("Birth")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("birth");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("char(32)")
                        .HasColumnName("key")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.Property<uint>("OwnerId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("owner_id");

                    b.HasKey("Id")
                        .HasName("pk_api_key");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_api_key_owner_id");

                    b.ToTable("api_key", (string)null);
                });

            modelBuilder.Entity("Garrison.Lib.Models.Character", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Data")
                        .HasMaxLength(1048576)
                        .HasColumnType("json")
                        .HasColumnName("data");

                    b.Property<string>("FoundryId")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("char(16)")
                        .HasColumnName("foundry_id")
                        .IsFixedLength()
                        .UseCollation("utf8mb4_0900_as_cs")
                        .HasAnnotation("MySQL:Charset", "utf8mb4")
                        .HasAnnotation("MySQL:Collation", "utf8mb4_0900_as_cs");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.Property<uint>("OwnerId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("owner_id");

                    b.HasKey("Id")
                        .HasName("pk_character");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_character_owner_id");

                    b.ToTable("character", (string)null);
                });

            modelBuilder.Entity("Garrison.Lib.Models.User", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasMaxLength(49)
                        .HasColumnType("binary(49)")
                        .HasColumnName("password")
                        .IsFixedLength();

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("user_name")
                        .UseCollation("utf8mb4_0900_ai_ci")
                        .HasAnnotation("MySQL:Charset", "utf8mb4")
                        .HasAnnotation("MySQL:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("ix_user_user_name");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Garrison.Lib.Models.Adventure", b =>
                {
                    b.HasOne("Garrison.Lib.Models.User", "GameMaster")
                        .WithMany()
                        .HasForeignKey("GameMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_adventure_user_game_master_id");

                    b.OwnsMany("Garrison.Lib.Models.AdventurePlayer", "Players", b1 =>
                        {
                            b1.Property<uint>("AdventureId")
                                .HasColumnType("int unsigned")
                                .HasColumnName("adventure_id");

                            b1.Property<uint>("PlayerId")
                                .HasColumnType("int unsigned")
                                .HasColumnName("player_id");

                            b1.Property<uint?>("CharacterId")
                                .HasColumnType("int unsigned")
                                .HasColumnName("character_id");

                            b1.HasKey("AdventureId", "PlayerId")
                                .HasName("pk_adventure_player");

                            b1.HasIndex("CharacterId")
                                .HasDatabaseName("ix_adventure_player_character_id");

                            b1.HasIndex("PlayerId")
                                .HasDatabaseName("ix_adventure_player_player_id");

                            b1.ToTable("adventure_player", (string)null);

                            b1.WithOwner("Adventure")
                                .HasForeignKey("AdventureId")
                                .HasConstraintName("fk_adventure_player_adventure_adventure_id");

                            b1.HasOne("Garrison.Lib.Models.Character", "Character")
                                .WithMany()
                                .HasForeignKey("CharacterId")
                                .HasConstraintName("fk_adventure_player_character_character_id");

                            b1.HasOne("Garrison.Lib.Models.User", "Player")
                                .WithMany()
                                .HasForeignKey("PlayerId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired()
                                .HasConstraintName("fk_adventure_player_user_player_id");

                            b1.Navigation("Adventure");

                            b1.Navigation("Character");

                            b1.Navigation("Player");
                        });

                    b.OwnsMany("Garrison.Lib.Models.Session", "Sessions", b1 =>
                        {
                            b1.Property<uint>("AdventureId")
                                .HasColumnType("int unsigned")
                                .HasColumnName("adventure_id");

                            b1.Property<ushort>("SessionNumber")
                                .HasColumnType("smallint unsigned")
                                .HasColumnName("session_number");

                            b1.HasKey("AdventureId", "SessionNumber")
                                .HasName("pk_session");

                            b1.ToTable("session", (string)null);

                            b1.WithOwner("Adventure")
                                .HasForeignKey("AdventureId")
                                .HasConstraintName("fk_session_adventure_adventure_id");

                            b1.Navigation("Adventure");
                        });

                    b.Navigation("GameMaster");

                    b.Navigation("Players");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Garrison.Lib.Models.ApiKey", b =>
                {
                    b.HasOne("Garrison.Lib.Models.User", "Owner")
                        .WithMany("ApiKeys")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_api_key_user_owner_id");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Garrison.Lib.Models.Character", b =>
                {
                    b.HasOne("Garrison.Lib.Models.User", "Owner")
                        .WithMany("Characters")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_character_user_owner_id");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Garrison.Lib.Models.User", b =>
                {
                    b.Navigation("ApiKeys");

                    b.Navigation("Characters");
                });
#pragma warning restore 612, 618
        }
    }
}
